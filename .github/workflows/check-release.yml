name: Check for New Release in Another Repo

# Run this workflow on a schedule (e.g., every hour)
on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:

jobs:
  check_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up GitHub CLI (gh) to access the GitHub API
      - name: Set up GitHub CLI
        run: |
          sudo apt-get install -y gh

      # Step 2: Fetch the latest release from the other repository
      - name: Get latest release from other repository
        id: get_release
        run: |
          # Replace with the owner and repo name of the other repository
          repo_owner="Byte-Nova"
          repo_name="Rimworld-Together"

          # Use GitHub CLI to get the latest release tag
          latest_release=$(gh api repos/${repo_owner}/${repo_name}/releases/latest --jq '.tag_name')
          echo "Latest release: $latest_release"

          # Save the latest release tag as an output to use later
          echo "::set-output name=latest_release::$latest_release"

      # Step 3: Compare with the previous release (stored in a file)
      - name: Check for new release
        id: check_release
        run: |
          previous_release=$(cat .previous_release || echo "none")
          latest_release="${{ steps.get_release.outputs.latest_release }}"
          echo "Previous release: $previous_release"
          echo "Latest release: $latest_release"

          if [ "$previous_release" != "$latest_release" ]; then
            echo "New release detected!"
            echo "$latest_release" > .previous_release
            echo "::set-output name=new_release::true"
          else
            echo "No new release."
            echo "::set-output name=new_release::false"
          fi

      # Step 4: Trigger the docker-build.yml workflow if a new release is detected
      - name: Trigger Docker build workflow
        if: steps.check_release.outputs.new_release == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker-build.yml/dispatches \
            -d '{"ref": "main"}'