name: Check for New Release in Another Repo

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:

jobs:
  check_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up GitHub CLI (gh) to access the GitHub API
      - name: Set up GitHub CLI
        run: |
          sudo apt-get install -y gh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set the GH_TOKEN environment variable

      # Step 2: Restore cache for the previous release information
      - name: Restore previous release cache
        id: cache_previous_release
        uses: actions/cache@v3
        with:
          path: .previous_release
          key: previous-release

      # Step 3: Fetch the latest release from the other repository
      - name: Get latest release from other repository
        id: get_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo_owner="Byte-Nova"
          repo_name="Rimworld-Together"

          # Use GitHub CLI to get the latest release tag
          latest_release=$(gh api repos/${repo_owner}/${repo_name}/releases/latest --jq '.tag_name')
          echo "Latest release: $latest_release"

          # Save the latest release tag in an environment file to use later
          echo "LATEST_RELEASE=$latest_release" >> $GITHUB_ENV

      # Step 4: Compare with the previous release (stored in cache)
      - name: Check for new release
        id: check_release
        run: |
          previous_release=$(cat .previous_release || echo "none")
          latest_release="${{ env.LATEST_RELEASE }}"
          echo "Previous release: $previous_release"
          echo "Latest release: $latest_release"

          if [ "$previous_release" != "$latest_release" ]; then
            echo "New release detected!"
            echo "$latest_release" > .previous_release
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
          else
            echo "No new release."
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
          fi

      # Step 5: Delete old cache so new version number can be recorded
      - name: Delete existing cache
        if: env.NEW_RELEASE == 'true'
        run: |
          rm -f .previous_release
          
      # Step 6: Cache the new release information if a new release is detected
      - name: Cache the new release info
        if: env.NEW_RELEASE == 'true'
        uses: actions/cache@v3
        with:
          path: .previous_release
          key: previous-release

      # Step 7: Trigger the docker-build.yml workflow if a new release is detected
      - name: Trigger Docker build workflow
        if: env.NEW_RELEASE == 'true'
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker-build.yml/dispatches \
            -d '{"ref": "main"}'
